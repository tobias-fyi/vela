{
  "data": [
    {
      "id": "all_equal",
      "type": "snippetListing",
      "title": "all_equal",
      "attributes": {
        "text": "Checks if all elements in a list are equal.\n\nUse `[1:]` and `[:-1]` to compare all the values in the given list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a284d604fca0eba2637f80ff4612a08e114be8df54e9ad3d5c9978fa6b96f757"
      }
    },
    {
      "id": "all_unique",
      "type": "snippetListing",
      "title": "all_unique",
      "attributes": {
        "text": "Returns `True` if all the values in a list are unique, `False` otherwise.\n\nUse `set()` on the given list to remove duplicates, use `len()` to compare its length with the length of the list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "85a0536056d343fefcc2e27f43e0de4c09df66c425827dd0bcfdc2331283f9d2"
      }
    },
    {
      "id": "average",
      "type": "snippetListing",
      "title": "average",
      "attributes": {
        "text": "Returns the average of two or more numbers.\n\nUse `sum()` to sum all of the `args` provided, divide by `len(args)`.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "78bfdea5946774504eea1ba100974ad48ce8cb0a1ce1404cee8d885f35bb93a1"
      }
    },
    {
      "id": "average_by",
      "type": "snippetListing",
      "title": "average_by",
      "attributes": {
        "text": "Returns the average of a list, after mapping each element to a value using the provided function.\n\nUse `map()` to map each element to the value returned by `fn`.\nUse `sum()` to sum all of the mapped values, divide by `len(lst)`.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8de876b55fd8b75ec395a5d70c29d83c7515d3ae2d59b9c7848e66e6cb854af0"
      }
    },
    {
      "id": "bifurcate",
      "type": "snippetListing",
      "title": "bifurcate",
      "attributes": {
        "text": "Splits values into two groups. \nIf an element in `filter` is `True`, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.\n\nUse list comprehension and `enumerate()` to add elements to groups, based on `filter`.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1d1f03106bae33aabbb4956f0553a29d942b0bafeb9d14d0db787262d114a116"
      }
    },
    {
      "id": "bifurcate_by",
      "type": "snippetListing",
      "title": "bifurcate_by",
      "attributes": {
        "text": "Splits values into two groups according to a function, which specifies which group an element in the input list belongs to. \nIf the function returns `True`, the element belongs to the first group; otherwise, it belongs to the second group.\n\nUse list comprehension to add elements to groups, based on `fn`.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "91c7bf77e761cdd1e5ab4832e3a394bb5c85426df375e5ff4ea45450aae6cdfc"
      }
    },
    {
      "id": "byte_size",
      "type": "snippetListing",
      "title": "byte_size",
      "attributes": {
        "text": "Returns the length of a string in bytes.\n\nUse `s.encode('utf-8')` to encode the given string and return its length.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2fc0a269966270d98c8f1721dde96e027e8b6146c3b84c0ac68ff2a6fe75c84a"
      }
    },
    {
      "id": "camel",
      "type": "snippetListing",
      "title": "camel",
      "attributes": {
        "text": "Converts a string to camelcase.\n\nUse `re.sub()` to replace any `-` or `_` with a space, using the regexp `r\"(_|-)+\"`.\nUse `title()` to capitalize the first letter of each word convert the rest to lowercase.\nFinally, use `replace()` to remove spaces between words.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b9a88311529b43189ddf945f9c86b0f05cdb4c2894e7f3a4305bdb6aa22171d5"
      }
    },
    {
      "id": "capitalize",
      "type": "snippetListing",
      "title": "capitalize",
      "attributes": {
        "text": "Capitalizes the first letter of a string.\n\nCapitalize the first letter of the string and then add it with rest of the string. \nOmit the `lower_rest` parameter to keep the rest of the string intact, or set it to `True` to convert to lowercase.\n\n",
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "f33a94899dfa72134171367526a2e0068dc0a8fc3c0504d42740aec1110e494b"
      }
    },
    {
      "id": "capitalize_every_word",
      "type": "snippetListing",
      "title": "capitalize_every_word",
      "attributes": {
        "text": "Capitalizes the first letter of every word in a string.\n\nUse `s.title()` to capitalize first letter of every word in the string.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4fc1e5869d50178ba135d6b30d3add0d3f5031ab8e24c07959f0321c2f2d7d6a"
      }
    },
    {
      "id": "cast_list",
      "type": "snippetListing",
      "title": "cast_list",
      "attributes": {
        "text": "Casts the provided value as a list if it's not one.\n\nUse `isinstance()` to check if the given value is enumerable and return it by using `list()` or encapsulated in a list accordingly.\n\n",
        "tags": [
          "utility",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0765b0134c5da933915f4c6a7c43dc50b004fd799514e66133e0cfe438af9171"
      }
    },
    {
      "id": "check_prop",
      "type": "snippetListing",
      "title": "function_name",
      "attributes": {
        "text": "Given a predicate function, `fn`, and a `prop` string, this curried function will then take an object to inspect by calling the property and passing it to the predicate.\n\nReturn a `lambda` function that takes an object and applies the predicate function, `fn` to the specified property.\n\n",
        "tags": [
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "ceb7dcb63cc7ec14237807b05a7cc47e7298969bd90fa1bd1ca96426a3cfa34f"
      }
    },
    {
      "id": "chunk",
      "type": "snippetListing",
      "title": "chunk",
      "attributes": {
        "text": "Chunks a list into smaller lists of a specified size.\n\nUse `list()` and `range()` to create a list of the desired `size`.\nUse `map()` on the list and fill it with splices of the given list.\nFinally, return the created list.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "04539dabc7eda5659177d2c3170343646ba5e4575b5f0127a348eb5d7b4e359c"
      }
    },
    {
      "id": "clamp_number",
      "type": "snippetListing",
      "title": "clamp_number",
      "attributes": {
        "text": "Clamps `num` within the inclusive range specified by the boundary values `a` and `b`.\n\nIf `num` falls within the range, return `num`. \nOtherwise, return the nearest number in the range.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4abb40db52960635289aa0c16e94763fccc89bba5f79dedee5332bdfd6df30c7"
      }
    },
    {
      "id": "compact",
      "type": "snippetListing",
      "title": "compact",
      "attributes": {
        "text": "Removes falsey values from a list.\n\nUse `filter()` to filter out falsey values (`False`, `None`, `0`, and `\"\"`).\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "49af477281165f9623eb1ad399be5f43705940587ba70ee5d4ac697fcb29c6cd"
      }
    },
    {
      "id": "compose",
      "type": "snippetListing",
      "title": "compose",
      "attributes": {
        "text": "Performs right-to-left function composition.\n\nUse `functools.reduce()` to perform right-to-left function composition. \nThe last (rightmost) function can accept one or more arguments; the remaining functions must be unary.\n\n",
        "tags": [
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "a70d6ec0dc67eb97bcc951e4d0a9489065bf2bb861f993026b0b1ed8517c6c00"
      }
    },
    {
      "id": "compose_right",
      "type": "snippetListing",
      "title": "compose_right",
      "attributes": {
        "text": "Performs left-to-right function composition.\n\nUse `functools.reduce()` to perform left-to-right function composition. \nThe first (leftmost) function can accept one or more arguments; the remaining functions must be unary.\n\n",
        "tags": [
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "7c16b51fea79fb9301d9e46cd512069bba1b332e0e1dad493249603ce0a50db4"
      }
    },
    {
      "id": "count_by",
      "type": "snippetListing",
      "title": "count_by",
      "attributes": {
        "text": "Groups the elements of a list based on the given function and returns the count of elements in each group.\n\nUse `map()` to map the values of the given list using the given function.\nIterate over the map and increase the element count each time it occurs.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "bcbf6bf4eea87d50914f20640482d6e25198357ac3ec5155276664905ac1e5e0"
      }
    },
    {
      "id": "count_occurences",
      "type": "snippetListing",
      "title": "count_occurences",
      "attributes": {
        "text": "Counts the occurrences of a value in a list.\n\nIncrement a counter for every item in the list that has the given value and is of the same type.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "eee88217431699369070beb38ca0265d963c78321bfd98de9e3a38533c6ee90e"
      }
    },
    {
      "id": "curry",
      "type": "snippetListing",
      "title": "curry",
      "attributes": {
        "text": "Curries a function.\n\nUse `functools.partial()` to return a new partial object which behaves like `fn` with the given arguments, `args`, partially applied.\n\n",
        "tags": [
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8b4d1654ec3fb0041fe2762ddf2834488e5161a3843bd3a6c659f1426385182f"
      }
    },
    {
      "id": "decapitalize",
      "type": "snippetListing",
      "title": "decapitalize",
      "attributes": {
        "text": "Decapitalizes the first letter of a string.\n\nDecapitalize the first letter of the string and then add it with rest of the string. \nOmit the `upper_rest` parameter to keep the rest of the string intact, or set it to `True` to convert to uppercase.\n\n",
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3bb7b5142417d0d14ba76f2221802ff72824243f7dd4331a2bbe20d20c24f6cf"
      }
    },
    {
      "id": "deep_flatten",
      "type": "snippetListing",
      "title": "deep_flatten",
      "attributes": {
        "text": "Deep flattens a list.\n\nUse recursion. \nUse `isinstance()` with `collections.abc.Iterable` to check if an element is iterable.\nIf it is, apply `deep_flatten()` recursively, otherwise return `[lst]`.\n\n",
        "tags": [
          "list",
          "recursion",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "2988946e5ef7486404d962bb5a19e6a8f5b845775688966e3133e3b33b86334a"
      }
    },
    {
      "id": "degrees_to_rads",
      "type": "snippetListing",
      "title": "degrees_to_rads",
      "attributes": {
        "text": "Converts an angle from degrees to radians.\n\nUse `math.pi` and the degrees to radians formula to convert the angle from degrees to radians.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "16bf7a5b40622e18047609f198cbd4f584c184c2c65a06e7765fac1ff10f9a50"
      }
    },
    {
      "id": "delay",
      "type": "snippetListing",
      "title": "delay",
      "attributes": {
        "text": "Invokes the provided function after `ms` milliseconds.\n\nUse `time.sleep()` to delay the execution of `fn` by `ms / 1000` seconds.\n\n",
        "tags": [
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "4b6091531fe0add9456f887dd4c90b7f7839f0a63edea7439be3e7f051c97556"
      }
    },
    {
      "id": "difference",
      "type": "snippetListing",
      "title": "difference",
      "attributes": {
        "text": "Returns the difference between two iterables.\n\nCreate a `set` from `b`, then use list comprehension on `a` to only keep values not contained in the previously created set, `_b`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "479fcdba73e7429ccb82649a354159ad9008c63f852c960d6733c10ecafceae3"
      }
    },
    {
      "id": "difference_by",
      "type": "snippetListing",
      "title": "difference_by",
      "attributes": {
        "text": "Returns the difference between two lists, after applying the provided function to each list element of both.\n\nCreate a `set` by applying `fn` to each element in `b`, then use list comprehension in combination with `fn` on `a` to only keep values not contained in the previously created set, `_b`.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5044c943260d7d4e162b60000d2a8dc2f689a43af6be7946b05fefc616c51425"
      }
    },
    {
      "id": "digitize",
      "type": "snippetListing",
      "title": "digitize",
      "attributes": {
        "text": "Converts a number to a list of digits.\n\nUse `map()` combined with `int` on the string representation of `n` and return a list from the result.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "90beb85f77896593c9d5a0fa23954d7bf0ea69edf769bc55f5125002e717f2f3"
      }
    },
    {
      "id": "drop",
      "type": "snippetListing",
      "title": "drop",
      "attributes": {
        "text": "Returns a list with `n` elements removed from the left.\n\nUse slice notation to remove the specified number of elements from the left.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "39a98596a5f94242a3bed40282ed2785f6e7254148bcb5410c5028dcbf352095"
      }
    },
    {
      "id": "drop_right",
      "type": "snippetListing",
      "title": "drop_right",
      "attributes": {
        "text": "Returns a list with `n` elements removed from the right.\n\nUse slice notation to remove the specified number of elements from the right.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b8166585e68a5b2b74af067029d1d8895edef94f745816c7e8d3b04a7bdc9792"
      }
    },
    {
      "id": "every",
      "type": "snippetListing",
      "title": "every",
      "attributes": {
        "text": "Returns `True` if the provided function returns `True` for every element in the list, `False` otherwise.\n\nUse `all()` in combination with `map` and `fn` to check if `fn` returns `True` for all elements in the list.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "40b8ce30ab95e515b6814e602a7f0755124b792d6f9c664f58e0ee61c27148c1"
      }
    },
    {
      "id": "every_nth",
      "type": "snippetListing",
      "title": "every_nth",
      "attributes": {
        "text": "Returns every nth element in a list.\n\nUse `[nth-1::nth]` to create a new list that contains every nth element of the given list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "043215573487367b96603083e9803521e4c30e4aa30b762da95307328dd485b1"
      }
    },
    {
      "id": "factorial",
      "type": "snippetListing",
      "title": "factorial",
      "attributes": {
        "text": "Calculates the factorial of a number.\n\nUse recursion. \nIf `num` is less than or equal to `1`, return `1`. \nOtherwise, return the product of `num` and the factorial of `num - 1`. \nThrows an exception if `num` is a negative or a floating point number.\n\n",
        "tags": [
          "math",
          "recursion",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c13c145eb46403345b747fb7ca9c378a0e7f00dcd9f033f0e414279fcb4fdb88"
      }
    },
    {
      "id": "fibonacci",
      "type": "snippetListing",
      "title": "fibonacci",
      "attributes": {
        "text": "Generates a list, containing the Fibonacci sequence, up until the nth term.\n\nStarting with `0` and `1`, use `list.append()` to add the sum of the last two numbers of the list to the end of the list, until the length of the list reaches `n`.  \nIf `n` is less or equal to `0`, return a list containing `0`.\n\n",
        "tags": [
          "math",
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "16760105f8db2ebeb984b63a9830d5b0293392e2f55fc13851b364f50e180f5b"
      }
    },
    {
      "id": "filter_non_unique",
      "type": "snippetListing",
      "title": "filter_non_unique",
      "attributes": {
        "text": "Filters out the non-unique values in a list.\n\nUse a `collections.Counter` to get the count of each value in the list.\nUse list comprehension to create a list containing only the unique values.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "fc7c8b72dd9c4f53cd5d8ffe4c2befd0f1a6807caf58c0a2ddced195c6fa6c4f"
      }
    },
    {
      "id": "filter_unique",
      "type": "snippetListing",
      "title": "filter_unique",
      "attributes": {
        "text": "Filters out the unique values in a list.\n\nUse a `collections.Counter` to get the count of each value in the list.\nUse list comprehension to create a list containing only the non-unique values.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d5680d2e4f63df60dbf4cef97de86a6e0aee70284aa2729ae69427e8231521e0"
      }
    },
    {
      "id": "find",
      "type": "snippetListing",
      "title": "find",
      "attributes": {
        "text": "Returns the value of the first element in the provided list that satisfies the provided testing function.\n\nUse list comprehension and `next()` to return the first element in `lst` for which `fn` returns `True`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3e879def3995b7bd2062230bdc8b87269eeb5dc9eb6ce9eb3f297d84dc5beb5e"
      }
    },
    {
      "id": "find_index",
      "type": "snippetListing",
      "title": "find_index",
      "attributes": {
        "text": "Returns the index of the first element in the provided list that satisfies the provided testing function.\n\nUse list comprehension, `enumerate()` and `next()` to return the index of the first element in `lst` for which `fn` returns `True`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2270fdbf382af07bdc47d0dba84eec939885734cb17f015186547a1b9a26ecce"
      }
    },
    {
      "id": "find_last",
      "type": "snippetListing",
      "title": "find_last",
      "attributes": {
        "text": "Returns the value of the last element in the provided list that satisfies the provided testing function.\n\nUse list comprehension and `next()` to return the last element in `lst` for which `fn` returns `True`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5a4ad2eca4edba75e139f8979bdb9eba7ab116e0c1f80d054261764d54e16957"
      }
    },
    {
      "id": "find_last_index",
      "type": "snippetListing",
      "title": "find_last_index",
      "attributes": {
        "text": "Returns the index of the last element in the provided list that satisfies the provided testing function.\n\nUse list comprehension, `enumerate()` and `next()` to return the index of the last element in `lst` for which `fn` returns `True`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "de25fa799e8392834d484b1609eb02a68a46dd9833086e4fdf9690fe2516a858"
      }
    },
    {
      "id": "find_parity_outliers",
      "type": "snippetListing",
      "title": "find_parity_outliers",
      "attributes": {
        "text": "Given a list, returns the items that are parity outliers.\n\nUse `collections.Counter` with a list comprehension to count even and odd values in the list, use `collections.Counter.most_common()` to get the most common parity.\nUse a list comprehension to find all elements that do not match the most common parity.\n\n",
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "87bee9709b95c43c36718bc31f6f3c381c05159b7d33e0016ede29d4168d3843"
      }
    },
    {
      "id": "flatten",
      "type": "snippetListing",
      "title": "flatten",
      "attributes": {
        "text": "Flattens a list of lists once.\n\nUse nested list comprehension to extract each value from sub-lists in order.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "49b4f976c9050c9cb6fe038653fc3dbc88135086255c06c4f46b746b21bfb544"
      }
    },
    {
      "id": "gcd",
      "type": "snippetListing",
      "title": "gcd",
      "attributes": {
        "text": "Calculates the greatest common divisor of a list of numbers.\n\nUse `functools.reduce()` and `math.gcd()` over the given list.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "fc9dfc759e41dc0d26ed4e339d7210e13c4cec8ed10b148d481a2d84fe0f63b8"
      }
    },
    {
      "id": "group_by",
      "type": "snippetListing",
      "title": "group_by",
      "attributes": {
        "text": "Groups the elements of a list based on the given function.\n\nUse `map()` and `fn` to map the values of the list to the keys of an object.\nUse list comprehension to map each element to the appropriate `key`.\n\n",
        "tags": [
          "list",
          "object",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d558526c1ec2887f13bb16fd5184a9b98f2a7a76907b191278f5e58e8703846e"
      }
    },
    {
      "id": "has_duplicates",
      "type": "snippetListing",
      "title": "has_duplicates",
      "attributes": {
        "text": "Returns `True` if there are duplicate values in a flat list, `False` otherwise.\n\nUse `set()` on the given list to remove duplicates, compare its length with the length of the list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "fb22c3f566fea0468c7331478cb216890de4af6b86b24f1ac41656bae949d99c"
      }
    },
    {
      "id": "head",
      "type": "snippetListing",
      "title": "head",
      "attributes": {
        "text": "Returns the head of a list.\n\nUse `lst[0]` to return the first element of the passed list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "967333852bd5578d4cb6bf8bfe20781b9137d5809320a6a000828456e32a1efe"
      }
    },
    {
      "id": "in_range",
      "type": "snippetListing",
      "title": "in_range",
      "attributes": {
        "text": "Checks if the given number falls within the given range.\n\nUse arithmetic comparison to check if the given number is in the specified range.\nIf the second parameter, `end`, is not specified, the range is considered to be from `0` to `start`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "dd49fd3dc6b7590a2607ded9b2f4b879ea56b93573e92376f669a1957ad9945b"
      }
    },
    {
      "id": "initial",
      "type": "snippetListing",
      "title": "initial",
      "attributes": {
        "text": "Returns all the elements of a list except the last one.\n\nUse `lst[0:-1]` to return all but the last element of the list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a55c33e2511216427f6b6f80d743f3fe4cd40a28f775c027d73352a04f531269"
      }
    },
    {
      "id": "initialize_2d_list",
      "type": "snippetListing",
      "title": "initialize_2d_list",
      "attributes": {
        "text": "Initializes a 2D list of given width and height and value.\n\nUse list comprehension and `range()` to generate `h` rows where each is a list with length `h`, initialized with `val`.\nIf `val` is not provided, default to `None`.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "0dea8eb7639aa7d0b2748ecfaeb80b1a93408340b6f697f604451b8e9442f477"
      }
    },
    {
      "id": "initialize_list_with_range",
      "type": "snippetListing",
      "title": "initialize_list_with_range",
      "attributes": {
        "text": "Initializes a list containing the numbers in the specified range where `start` and `end` are inclusive with their common difference `step`.\n\nUse `list` and `range()` to generate a list of the appropriate length, filled with the desired values in the given range.\nOmit `start` to use the default value of `0`.\nOmit `step` to use the default value of `1`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b7fa8130ef5c85aacb645b1e194073167f29a5ce234b5e13549dbb728ba09ca9"
      }
    },
    {
      "id": "initialize_list_with_values",
      "type": "snippetListing",
      "title": "initialize_list_with_values",
      "attributes": {
        "text": "Initializes and fills a list with the specified value.\n\nUse list comprehension and `range()` to generate a list of length equal to `n`, filled with the desired values.\nOmit `val` to use the default value of `0`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "87604b968fccbc3d60399619b388f5939d646059db467fc2c86f99138f68b952"
      }
    },
    {
      "id": "intersection",
      "type": "snippetListing",
      "title": "intersection",
      "attributes": {
        "text": "Returns a list of elements that exist in both lists.\n\nCreate a `set` from `a` and `b`, then use the built-in set operator `&` to only keep values contained in both sets, then transform the `set` back into a `list`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d20f757b18d4368324bfa74bb907f5dc2df9262886ea3722edd5015418ce282d"
      }
    },
    {
      "id": "intersection_by",
      "type": "snippetListing",
      "title": "intersection_by",
      "attributes": {
        "text": "Returns a list of elements that exist in both lists, after applying the provided function to each list element of both.\n\nCreate a `set` by applying `fn` to each element in `b`, then use list comprehension in combination with `fn` on `a` to only keep values contained in both lists.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "eb4bff1a92a7848c8184531fee590e8f060a6d4f6ffe214aec4ccda7a5e18031"
      }
    },
    {
      "id": "is_anagram",
      "type": "snippetListing",
      "title": "is_anagram",
      "attributes": {
        "text": "Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).\n\nUse `s.replace()` to remove spaces from both strings.\nCompare the lengths of the two strings, return `False` if they are not equal.\nUse `sorted()` on both strings and compare the results.\n\n",
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "efdcecce589a3812218ede260f156888eb8544ccf85eab35d1885689668292e8"
      }
    },
    {
      "id": "is_divisible",
      "type": "snippetListing",
      "title": "is_divisible",
      "attributes": {
        "text": "Checks if the first numeric argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e6272becc36195e4b76f62baa61d43d9de5472201d1fb589e18bd5f47d6d57b0"
      }
    },
    {
      "id": "is_even",
      "type": "snippetListing",
      "title": "is_even",
      "attributes": {
        "text": "Returns `True` if the given number is even, `False` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `True` if the number is even, `False` if the number is odd.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "354d3fcfa67b5df106c0ff528246bfacd2d7cec4942a7c3a904d87e76d7dae11"
      }
    },
    {
      "id": "is_odd",
      "type": "snippetListing",
      "title": "is_odd",
      "attributes": {
        "text": "Returns `True` if the given number is odd, `False` otherwise.\n\nChecks whether a number is even or odd using the modulo (`%`) operator. \nReturns `True` if the number is odd, `False` if the number is even.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "261771aa5fd9c9dcb60dd93c29afce0de3a51c505e474fa7c76789a1e0d8f5c8"
      }
    },
    {
      "id": "kebab",
      "type": "snippetListing",
      "title": "kebab",
      "attributes": {
        "text": "Converts a string to kebab case.\n\nBreak the string into words and combine them adding `-` as a separator, using a regexp.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "db8a145f1dc53a254a9572fa47f76968b4381964b2291c5883c78f9337b7dbc9"
      }
    },
    {
      "id": "keys_only",
      "type": "snippetListing",
      "title": "keys_only",
      "attributes": {
        "text": "Returns a flat list of all the keys in a flat dictionary.\n\nUse `dict.keys()` to return the keys in the given dictionary.\nReturn a `list()` of the previous result.\n\n",
        "tags": [
          "object",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4e4a5b4892fcccb2982e7ae352f9d61fa0234c209431c9461ea47d503feaaf49"
      }
    },
    {
      "id": "last",
      "type": "snippetListing",
      "title": "last",
      "attributes": {
        "text": "Returns the last element in a list.\n\nuse `lst[-1]` to return the last element of the passed list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "7fc339fbdb18e993fc93950b307fe2ec792c3f010f5dee0971d02288af16d67b"
      }
    },
    {
      "id": "lcm",
      "type": "snippetListing",
      "title": "lcm",
      "attributes": {
        "text": "Returns the least common multiple of a list of numbers.\n\nUse `functools.reduce()`, `math.gcd()` and `lcm(x,y) = x * y / gcd(x,y)` over the given list.\n\n",
        "tags": [
          "math",
          "list",
          "recursion",
          "advanced"
        ]
      },
      "meta": {
        "hash": "030af844c409419551f3ce340666ad7b59949b54814fe50f3a474c2a06a211a5"
      }
    },
    {
      "id": "longest_item",
      "type": "snippetListing",
      "title": "longest_item",
      "attributes": {
        "text": "Takes any number of iterable objects or objects with a length property and returns the longest one. \nIf multiple objects have the same length, the first one will be returned.\n\nUse `max()` with `len` as the `key` to return the item with the greatest length.\n\n",
        "tags": [
          "list",
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "af50f2096fef9a18346e3c220ff1957ab4218075e6c02ae05d8c3f6e3d269549"
      }
    },
    {
      "id": "map_values",
      "type": "snippetListing",
      "title": "map_values",
      "attributes": {
        "text": "Creates an object with the same keys as the provided object and values generated by running the provided function for each value.\n\nUse `dict.keys()` to iterate over the object's keys, assigning the values produced by `fn` to each key of a new object.\n\n",
        "tags": [
          "object",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "91f93e124e2f1fb9d25b62db478f91503330947a7c212dc97215dec8c4b225fe"
      }
    },
    {
      "id": "max_by",
      "type": "snippetListing",
      "title": "max_by",
      "attributes": {
        "text": "Returns the maximum value of a list, after mapping each element to a value using the provided function.\n\nUse `map()` with `fn` to map each element to a value using the provided function, use `max()` to return the maximum value.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "beginner"
        ]
      },
      "meta": {
        "hash": "53b802a4eb47675a404933430e2b7aa061d879d612607b79793080a47243d205"
      }
    },
    {
      "id": "max_element_index",
      "type": "snippetListing",
      "title": "max_element_index",
      "attributes": {
        "text": "Returns the index of the element with the maximum value in a list.\n\nUse `max()` and `list.index()` to get the maximum value in the list and return its index.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "efccd7f3d8767fa7c7759cab5eec415fdd51bf095dffe197861136b013623fe7"
      }
    },
    {
      "id": "max_n",
      "type": "snippetListing",
      "title": "max_n",
      "attributes": {
        "text": "Returns the `n` maximum elements from the provided list. \nIf `n` is greater than or equal to the provided list's length, then return the original list (sorted in descending order).\n\nUse `sorted()` to sort the list, `[:n]` to get the specified number of elements.\nOmit the second argument, `n`, to get a one-element list.\n\n",
        "tags": [
          "list",
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a87775ce6bd1590c7c7b31b7dfce03b00120e4e8183c65cec8fdd3841fa369d7"
      }
    },
    {
      "id": "median",
      "type": "snippetListing",
      "title": "median",
      "attributes": {
        "text": "Finds the median of a list of numbers.\n\nSort the numbers of the list using `list.sort()` and find the median, which is either the middle element of the list if the list length is odd or the average of the two middle elements if the list length is even.\n\n[`statistics.median()`](https://docs.python.org/3/library/statistics.html#statistics.median) provides similar functionality to this snippet.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2cbdc2820f9bd452c3d9d7ec3ea72f449ffc57765145d997ad4b2f108e904bdf"
      }
    },
    {
      "id": "min_by",
      "type": "snippetListing",
      "title": "min_by",
      "attributes": {
        "text": "Returns the minimum value of a list, after mapping each element to a value using the provided function.\n\nUse `map()` with `fn` to map each element to a value using the provided function, use `min()` to return the minimum value.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2a913d7608234d8988d44fa71e0477cdb2185f3d32f4cc22860ea2807255e585"
      }
    },
    {
      "id": "min_n",
      "type": "snippetListing",
      "title": "min_n",
      "attributes": {
        "text": "Returns the `n` minimum elements from the provided list. \nIf `n` is greater than or equal to the provided list's length, then return the original list (sorted in ascending order).\n\nUse `sorted() to sort the list, `[:n]` to get the specified number of elements.\nOmit the second argument, `n`, to get a one-element list.\n\n",
        "tags": [
          "list",
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "c920b58f01c63346e65eab83a60c4635d4c104e41767b9d41ad94029e662b902"
      }
    },
    {
      "id": "most_frequent",
      "type": "snippetListing",
      "title": "most_frequent",
      "attributes": {
        "text": "Returns the most frequent element in a list.\n\nUse `set(list)` to get the unique values in the `list` combined with `max()` to find the element that has the most appearances.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e63217dfdd3ea87db1448e4178dffcf59ae3cff4138062c6e623896076d802db"
      }
    },
    {
      "id": "n_times_string",
      "type": "snippetListing",
      "title": "n_times_string",
      "attributes": {
        "text": "Prints out the same string a defined number of times.\n\nRepeat the string `n` times, using the `*` operator.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "8ecad31184e8b4e54f16a4107286d1d43cbc84608f19ccf472143a85c3a23908"
      }
    },
    {
      "id": "none",
      "type": "snippetListing",
      "title": "none",
      "attributes": {
        "text": "Returns `False` if the provided function returns `True` for at least one element in the list, `True` otherwise.\n\nUse `all()` and `fn` to check if `fn` returns `False` for all the elements in the list.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "0dd3614b71e7a0b646a084e991eb6b4b2940492a14e6b8159d5d8a60a5abe04d"
      }
    },
    {
      "id": "offset",
      "type": "snippetListing",
      "title": "offset",
      "attributes": {
        "text": "Moves the specified amount of elements to the end of the list.\n\nUse `lst[offset:]` and `lst[:offset]` to get the two slices of the list and combine them before returning.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "1be5e82e22a183c88351baa1cc14cab498e20dd17d6096de7915f6dcb16c76b9"
      }
    },
    {
      "id": "palindrome",
      "type": "snippetListing",
      "title": "palindrome",
      "attributes": {
        "text": "Returns `True` if the given string is a palindrome, `False` otherwise.\n\nUse `s.lower()` and `re.sub()` to convert to lowercase and  remove non-alphanumeric characters from the given string. \nThen, compare the new string with its reverse.\n\n",
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e288ab1f10bef9dc735acdb5b6b6bf7f11dbe4381dea9a4710a797ffe15cf29a"
      }
    },
    {
      "id": "rads_to_degrees",
      "type": "snippetListing",
      "title": "rads_to_degrees",
      "attributes": {
        "text": "Converts an angle from radians to degrees.\n\nUse `math.pi` and the radian to degree formula to convert the angle from radians to degrees.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b8397e39c3e1187f47c39402afb90f5d6108894ffddaac37e435803ee1274d3a"
      }
    },
    {
      "id": "reverse_string",
      "type": "snippetListing",
      "title": "reverse_string",
      "attributes": {
        "text": "Returns the reverse of a string.\n\nUse string slicing to reverse the string.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "beba9501ba22c14d92d1ea1c0be4686ad8e2e659b0945e066c1eb2a05d323d6c"
      }
    },
    {
      "id": "sample",
      "type": "snippetListing",
      "title": "sample",
      "attributes": {
        "text": "Returns a random element from a list.\n\nUse `random.randint()` to generate a random number that corresponds to an index in the list, return the element at that index.\n\n[`random.sample()`](https://docs.python.org/3/library/random.html#random.sample) provides similar functionality to this snippet.\n\n",
        "tags": [
          "list",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0e0d74a26dfa80b19c0ba245235997c39cde44ff5385802cecc88f296c108e90"
      }
    },
    {
      "id": "shuffle",
      "type": "snippetListing",
      "title": "shuffle",
      "attributes": {
        "text": "Randomizes the order of the values of an list, returning a new list.\n\nUses the [Fisher-Yates algorithm](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) to reorder the elements of the list.\n\n[`random.shuffle`](https://docs.python.org/3/library/random.html#random.shuffle) provides similar functionality to this snippet.\n\n",
        "tags": [
          "list",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "817c98747813310506251815328e697f4032d8bab1ba87d3bfcc642b7b51d0cf"
      }
    },
    {
      "id": "similarity",
      "type": "snippetListing",
      "title": "similarity",
      "attributes": {
        "text": "Returns a list of elements that exist in both lists.\n\nUse list comprehension on `a` to only keep values contained in both lists.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "51e5a4fc0b3376f24804b51f71c3daed109b1e60535aa39bca44c1918fedaacf"
      }
    },
    {
      "id": "snake",
      "type": "snippetListing",
      "title": "snake",
      "attributes": {
        "text": "Converts a string to snake case.\n\nBreak the string into words and combine them adding `_` as a separator, using a regexp.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "706341f0404965144fb066967ff6eda1d691b858decacbd1dfbba6759878b237"
      }
    },
    {
      "id": "some",
      "type": "snippetListing",
      "title": "some",
      "attributes": {
        "text": "Returns `True` if the provided function returns `True` for at least one element in the list, `False` otherwise.\n\nUse `any()` in combination with `map()` and `fn` to check if `fn` returns `True` for any element in the list.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b104995e92213cbfeac2dce438e9d6f8fd13e18b8fb106789efa06f9285da2bb"
      }
    },
    {
      "id": "split_lines",
      "type": "snippetListing",
      "title": "split_lines",
      "attributes": {
        "text": "Splits a multiline string into a list of lines.\n\nUse `s.split()` and `'\\n'` to match line breaks and create a list.\n\n[`str.splitlines()`](https://docs.python.org/3/library/stdtypes.html#str.splitlines) provides similar functionality to this snippet.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d3929f4b59663cac5b5f6bae84ee5a849b8ed291ffd80368025ab3c473f6a5b3"
      }
    },
    {
      "id": "spread",
      "type": "snippetListing",
      "title": "spread",
      "attributes": {
        "text": "Flattens a list, by spreading its elements into a new list.\n\nLoop over elements, use `list.extend()` if the element is a list, `list.append()` otherwise.\n\n",
        "tags": [
          "list",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "a483a7203d0ea1ceebbcbe05d50ad724798ebdb8c9786b4be46d671b03daebc8"
      }
    },
    {
      "id": "sum_by",
      "type": "snippetListing",
      "title": "sum_by",
      "attributes": {
        "text": "Returns the sum of a list, after mapping each element to a value using the provided function.\n\nUse `map()` with `fn` to map each element to a value using the provided function, use `sum()` to return the sum of the values.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2051bc61e1359b1fd9fb14defaac6e8014e8633a09de634f44172a6ac52568f5"
      }
    },
    {
      "id": "symmetric_difference",
      "type": "snippetListing",
      "title": "symmetric_difference",
      "attributes": {
        "text": "Returns the symmetric difference between two iterables, without filtering out duplicate values.\n\nCreate a `set` from each list, then use list comprehension on each one to only keep values not contained in the previously created set of the other.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e5bb81e529740a7fbb9fe63eed33dc4ef390e7bc8c9c954a22ae3327f3d157ed"
      }
    },
    {
      "id": "symmetric_difference_by",
      "type": "snippetListing",
      "title": "symmetric_difference_by",
      "attributes": {
        "text": "Returns the symmetric difference between two lists, after applying the provided function to each list element of both.\n\nCreate a `set` by applying `fn` to each element in every list, then use list comprehension in combination with `fn` on each one to only keep values not contained in the previously created set of the other.\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "a3a978dbb2d7ffd0101b935484439b191fa432831f003faeefc05263eafc35e5"
      }
    },
    {
      "id": "tail",
      "type": "snippetListing",
      "title": "tail",
      "attributes": {
        "text": "Returns all elements in a list except for the first one.\n\nReturn `lst[1:]` if the list's length is more than `1`, otherwise, return the whole list.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d53c8932c4c9deebcd2f578b62b2a5f09a081885f848a2ea97721c15f2e7ded2"
      }
    },
    {
      "id": "transpose",
      "type": "snippetListing",
      "title": "transpose",
      "attributes": {
        "text": "Returns the transpose of a two-dimensional list.\n\nUse `*lst` to get the passed list as tuples.\nUse `zip()` in combination with `list()` to create the transpose of the given two-dimensional list.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d6148455c7451e290ad1edf5ac25bf79f8f20c56c829105322b3c4007d5ad20b"
      }
    },
    {
      "id": "unfold",
      "type": "snippetListing",
      "title": "unfold",
      "attributes": {
        "text": "Builds a list, using an iterator function and an initial seed value.\n\nThe iterator function accepts one argument (`seed`) and must always return a list with two elements ([`value`, `nextSeed`]) or `False` to terminate.\nUse a generator function, `fn_generator`, that uses a `while` loop to call the iterator function and `yield` the `value` until it returns `False`.\nUse list comprehension to return the list that is produced by the generator, using the iterator function.\n\n",
        "tags": [
          "function",
          "list",
          "advanced"
        ]
      },
      "meta": {
        "hash": "e9d027a02786f51db720328d695b20113c33fc8c96bbabb7d5d0fdcdf4993f9c"
      }
    },
    {
      "id": "union",
      "type": "snippetListing",
      "title": "union",
      "attributes": {
        "text": "Returns every element that exists in any of the two lists once.\n\nCreate a `set` with all values of `a` and `b` and convert to a `list`.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "0402c6758ffea9463ef552eecdec587039543f67f74bf2c7208beca85be2ee81"
      }
    },
    {
      "id": "union_by",
      "type": "snippetListing",
      "title": "union_by",
      "attributes": {
        "text": "Returns every element that exists in any of the two lists once, after applying the provided function to each element of both.\n\nCreate a `set` by applying `fn` to each element in `a`, then use list comprehension in combination with `fn` on `b` to only keep values not contained in the previously created set, `_a`.\nFinally, create a `set` from the previous result and `a` and transform it into a `list`\n\n",
        "tags": [
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fe68011222e43bc49339c4b6204b14c9c61c2d16014ed3a5d007cd7629192ffa"
      }
    },
    {
      "id": "unique_elements",
      "type": "snippetListing",
      "title": "unique_elements",
      "attributes": {
        "text": "Returns the unique elements in a given list.\n\nCreate a `set` from the list to discard duplicated values, then return a `list` from it.\n\n",
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "1f28461c8bbf4ce0195c756b2f013e519a43fbdef8b6a3640eafab2a6cb20bc9"
      }
    },
    {
      "id": "values_only",
      "type": "snippetListing",
      "title": "values_only",
      "attributes": {
        "text": "Returns a flat list of all the values in a flat dictionary.\n\nUse `dict.values()` to return the values in the given dictionary.\nReturn a `list()` of the previous result.\n\n",
        "tags": [
          "object",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ea3005a1cc4999d065fcf7141c14fd481f8384bc7d45ecf0eeaf04b6eb8adb66"
      }
    },
    {
      "id": "when",
      "type": "snippetListing",
      "title": "when",
      "attributes": {
        "text": "Tests a value, `x`, against a `predicate` function, conditionally applying a function. \n\nCheck if the value of `predicate(x)` is `True` and if so return `when_true(x)`, otherwise return `x`.\n\n",
        "tags": [
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8f04bf926446b8c1c73fe0127d3d9a59141d7287ea9e72e8fe4f71b1762f6049"
      }
    },
    {
      "id": "zip",
      "type": "snippetListing",
      "title": "zip",
      "attributes": {
        "text": "Creates a list of elements, grouped based on the position in the original lists.\n\nUse `max` combined with `list comprehension` to get the length of the longest list in the arguments. \nLoop for `max_length` times grouping elements. \nIf lengths of `lists` vary, use `fill_value` (defaults to `None`). \n\n[`zip()`](https://docs.python.org/3/library/functions.html#zip) and [`itertools.zip_longest()`](https://docs.python.org/3/library/itertools.html#itertools.zip_longest) provide similar functionality to this snippet.\n\n",
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "a42a76e7a962aded1f6f30495095fe3c005be83d37f18e63285a3425184772ec"
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetListingArray",
    "language": {
      "short": "py",
      "long": "Python"
    }
  }
}